import * as yup from "yup";
import { appLevelOptions } from "../config";
import { SaClientcompany } from "./yup_clientcompany";
import { SaDeliverydetail, deliverydetail_schema } from "./yup_deliverydetail";
import { SaOtherCharge, othercharge_schema } from "./yup_othercharge";
import { SaSubbroker } from "./yup_subbroker";
import {
	yupDateOptional,
	yupDateRequired,
	yupFinancialYearBound,
	yupIdRequired,
	yupNumberOptional,
	yupNumberOptionalMinMax,
	yupStringOptional,
	yupStringOptionalOneof,
	yupStringRequired,
} from "./yup_utils";
import { SaVariationBreakdown, variationbreakdown_schema } from "./yup_variationbreakdown";

export const invoice_product_jt_schema = {
	financial_year: yup.number().required(),
	id: yupNumberOptionalMinMax(1), // autogenerated-serial
	invoice_id: yupIdRequired,
	// FK CASCADE - RESTRICT (STOP ORDER FROM DELETING)
	order_id: yupStringOptional,
	product_id: yupNumberOptionalMinMax(1),
	product_actual_quantity: yupNumberOptionalMinMax(0),
	product_actual_uom: yupStringOptionalOneof(appLevelOptions.uomOptions),
	product_billed_price: yupNumberOptionalMinMax(0.01, 99999),
	product_billed_quantity: yupNumberOptionalMinMax(0),
	product_billed_uom: yup.string().required().oneOf(appLevelOptions.uomOptions),
	product_minprice: yupNumberOptionalMinMax(0),
	product_maxprice: yupNumberOptionalMinMax(0),
	product_name: yupStringOptional,
	product_brand_name: yupStringOptional,
	product_description: yupStringOptional,
	product_image_urls: yup.array().nullable().optional().of(yup.string().nullable()),
	product_taxable_amount: yup.number().required().min(0.01),
	product_variations_breakdown: yup
		.array()
		.transform((v: SaVariationBreakdown[], o: SaVariationBreakdown[]) => {
			if (o && o.some((varObj) => varObj.variation_price || varObj.variation_quantity)) return v;
			return null;
		})
		.optional()
		.nullable()
		.of(yup.object().shape(variationbreakdown_schema).noUnknown()),
};

const saInvProdjt = yup.object().shape(invoice_product_jt_schema).noUnknown();
export type SaInvoiceProductJt = yup.InferType<typeof saInvProdjt>;

export const invoice_schema = {
	//commission details
	commission_amount: yupNumberOptionalMinMax(0),
	commission_calculate_on_base_number: yupNumberOptionalMinMax(0), // eg. grandtotal_taxable_amount || grandtotal_actual_quantity || etc...
	commission_calculate_on_option: yupStringOptionalOneof(appLevelOptions.calculateCommissionOnOptions).default("GROSS AMOUNT BEFORE TAX"),
	commission_deducted_in_invoice: yupNumberOptionalMinMax(0),
	commission_collect_from: yupStringOptionalOneof(appLevelOptions.commissionCollectFrom).default("SUPPLIER"),
	commission_multiple: yupNumberOptionalMinMax(0).default(2),
	// comm bill details
	against_invoice_commbill_id: yupNumberOptionalMinMax(1),
	total_commbill_base_amount: yupNumberOptionalMinMax(0.01),
	total_commbill_amount: yupNumberOptionalMinMax(0.01),
	// customer details
	// FK
	customer_id: yup.number().required().min(1),
	customer_name: yup.string().required(),
	customer_branch: yupStringOptional,
	// FK
	customer_subbroker_id: yup.number().required().min(1),
	customer_subbroker_incentive: yupNumberOptionalMinMax(0),
	customer_subbroker_name: yup.string().required(),
	// delivery details
	// CASCADE DELETE
	delivery_details: yup.array().nullable().optional().of(yup.object().shape(deliverydetail_schema).noUnknown()),
	financial_year: yupFinancialYearBound(),
	// other charges
	othercharges: yup
		.array()
		.transform((v, o) => {
			if (!o) return null;
			v = v.filter((chargeObj: SaOtherCharge) => Boolean(chargeObj.charge_name));
			return v.length === 0 ? null : v;
		})
		.nullable()
		.optional()
		.of(yup.object().shape(othercharge_schema).noUnknown()),
	// ownercompany details
	// FK
	ownercompany_id: yup.number().required().min(1),
	ownercompany_name: yup.string().required(),
	// payment received fields
	last_payment_date: yupDateOptional,
	outstanding_amount: yup.number().required().default(0),
	payment_ids: yup.array().optional().nullable().of(yup.number()),
	// products
	// CASCADE DELETE
	products: yup.array().min(1).of(yup.object().shape(invoice_product_jt_schema).noUnknown()),
	price_or_range: yupStringOptional.default(""),
	// salesman details
	// FK
	salesman_id: yup.number().required().min(1).typeError("Salesman is required"),
	salesman_name: yup.string().required(),
	// supplier details
	supplier_branch: yupStringOptional,
	// FK
	supplier_id: yup.number().required().min(1),
	supplier_invoice_date: yupDateRequired,
	supplier_invoice_number: yup.string().required(),
	supplier_name: yup.string().required(),
	// FK
	supplier_subbroker_id: yup.number().required().min(1),
	supplier_subbroker_incentive: yupNumberOptionalMinMax(0),
	supplier_subbroker_name: yup.string().required(),
	// UNIQUE (in table)
	supplierid_finyr_invoicenumber: yup.string().required(), // <supplier_id>_<financial_year>_<supplier_invoice_number>
	// voucher details
	payment_due_date: yupDateRequired,
	payment_due_days: yup.number().required().min(0).default(0),
	grandtotal_actual_quantity: yupNumberOptionalMinMax(0),
	grandtotal_actual_uom: yupStringOptionalOneof([...appLevelOptions.uomOptions, "MANY"]),
	grandtotal_billed_quantity: yupNumberOptionalMinMax(0),
	grandtotal_billed_uom: yupStringOptionalOneof([...appLevelOptions.uomOptions, "MANY"]),
	grandtotal_charges_amount: yupNumberOptional,
	grandtotal_product_amount: yup.number().when(["products", "supplier_invoice_number"], ([products, supplier_invoice_number], field) => {
		if (supplier_invoice_number === "ON ACCOUNT") return field.required().default(0);
		const productsTotal: number = products.reduce(
			(acc: number, prodObj: SaInvoiceProductJt) => acc + (prodObj.product_taxable_amount || 0),
			0,
		);
		return field.required().min(productsTotal).max(productsTotal);
	}),
	grandtotal_tax_percent: yupNumberOptionalMinMax(0),
	grandtotal_tax_amount: yup.number().required().min(0).default(0),
	tcs_percent: yupNumberOptionalMinMax(0),
	tcs_amount: yupNumberOptionalMinMax(0),
	grandtotal_taxable_amount: yupNumberOptionalMinMax(0),
	grandtotal_invoice_amount: yup
		.number()
		.when(
			["grandtotal_product_amount", "grandtotal_charges_amount", "grandtotal_tax_amount", "supplier_invoice_number", "tcs_amount"],
			([prod_amt, chargesAmt, tax_amt, suppInvNo, tcs_amt], field) => {
				const total_amt = Math.round((prod_amt || 0) + (chargesAmt || 0) + (tax_amt || 0) + (tcs_amt || 0));
				return suppInvNo === "ON ACCOUNT" ? field.required().default(0) : field.required().min(total_amt).max(total_amt);
			},
		),
	// PK
	id: yupIdRequired,
	extra_image_urls: yup.array().optional().nullable(),
	notes: yupStringOptional,
	serial_number: yup
		.number()
		.when("supplier_invoice_number", ([supplier_invoice_number], field) =>
			supplier_invoice_number === "ON ACCOUNT" ? field.required().max(-1) : field.required().min(1),
		),
	status: yup.string().required().oneOf(["Extra", "Paid", "Part", "Pending", "Draft"]).default("Draft"),
	type: yup.string().required().default("invoice").oneOf(["invoice"]),
	voucher_date: yupDateRequired, // Invoice Receive Date
};
export interface SaInvoice {
	/** primary key for the table which is = <ownercompany_id><serial_number.padStart(6,'0')>  example:1000001 */
	id: number;
	/** commission amount */
	commission_amount: number;
	/** commission calculate on base number */
	commission_calculate_on_base_number: number;
	/** commission calculate on option value will be one of ['GROSS AMOUNT BEFORE TAX', 'PRODUCTS LEVEL TOTAL', 'TOTAL INVOICE AMOUNT'], */
	commission_calculate_on_option: string;
	/** commission deducted in invoice */
	commission_deducted_in_invoice: number;
	/** commission collect from value will be one of [CUSTOMER, SUPPLIER, SUB-BROKER SUPPLIER, SUB-BROKER CUSTOMER], */
	commission_collect_from: string;
	/** commission per quantity */
	commission_multiple: number;
	customer: SaClientcompany;
	/** customer name */
	customer_name: string;
	/** customer branch */
	customer_branch: string | null;
	delivery_details: SaDeliverydetail[];
	othercharges: object[];
	/** ownercompany name */
	ownercompany_name: string;
	/** supplier name */
	supplier_name: string;
	/** supplier branch */
	supplier_branch: string | null;
	/** payment_due_date in YYYYMMDD format */
	payment_due_date: string;
	products: SaInvoiceProductJt[];
	price_or_range: string;
	/** grandtotal product amount */
	grandtotal_product_amount: number;
	/** grandtotal actual quantity */
	grandtotal_actual_quantity: number;
	/** grandtotal actual uom, null if multiple uoms in the invoice */
	grandtotal_actual_uom: string | null;
	/** grandtotal billed quantity */
	grandtotal_billed_quantity: number;
	/** grandtotal billed uom, null if multiple uoms in the invoice */
	grandtotal_billed_uom: string | null;
	/** grandtotal charges amount */
	grandtotal_charges_amount: number | null;
	/** grandtotal taxable amount */
	grandtotal_taxable_amount: number;
	/** grandtotal tax percent */
	grandtotal_tax_percent: number;
	/** grandtotal tax amount */
	grandtotal_tax_amount: number;
	/** grandtotal invoice amount */
	grandtotal_invoice_amount: number;
	/** extra images like photo of invoice, etc... */
	extra_image_urls: string[] | null;
	/** notes */
	notes: string | null;
	/** serial number without any prefix or suffix */
	serial_number: string;
	/** status value will be one of [Draft, Active] */
	status: "Extra" | "Paid" | "Part" | "Pending" | "Draft";
	/** supplier invoice number */
	supplier_invoice_number: string;
	/** supplierid_finyr_invoicenumber = <supplier_id>_<financial_year>_<supplier_invoice_number>, we are not using padd start trick here because supplier invoice number can be string also */
	supplierid_finyr_invoicenumber: string;
	/** supplier invoice date in YYYYMMDD format */
	supplier_invoice_date: string;
	/** type = invoice */
	type: string;
	/** voucher date in YYYYMMDD format */
	voucher_date: string;
	/** auto increment id */
	customer_id: number | null;
	/** auto increment id */
	ownercompany_id: number | null;
	supplier: SaClientcompany;
	/** auto increment id */
	supplier_id: number | null;
	customer_subbroker: SaSubbroker;
	/** customer's subbroker id, default will be direct */
	customer_subbroker_id: number;
	/** customer's subbroker incentive */
	customer_subbroker_incentive: number;
	/** customer's subbroker name */
	customer_subbroker_name: string;
	supplier_subbroker: SaSubbroker;
	/** supplier's subbroker id, default will be direct */
	supplier_subbroker_id: number;
	/** supplier's subbroker incentive */
	supplier_subbroker_incentive: number;
	/** supplier's subbroker name */
	supplier_subbroker_name: string;
	/** payment_due_days  */
	payment_due_days: number;
}

export const invoiceValidator = yup.object().shape(invoice_schema).noUnknown();
