import * as yup from "yup";
import { SaOtherCharge, othercharge_schema } from "./yup_othercharge";
import { payment_drcrnote } from "./yup_payment";
import {
	yupDateOptional,
	yupDateRequired,
	yupFinancialYearBound,
	yupIdOptional,
	yupIdRequired,
	yupNumberOptional,
	yupNumberOptionalMinMax,
	yupStringOptional,
	yupStringRequired,
} from "./yup_utils";

export const payment_againstCommBill_jt_schema = {
	cheque_amount: yupNumberOptionalMinMax(0),
	financial_year: yupFinancialYearBound(),
	// PK
	id: yupNumberOptionalMinMax(1), // autogenerated-serial
	commBill_amount: yupNumberOptional,
	commBill_id: yupIdRequired,
	commBill_outstanding_amount: yup.number().required(),
	commBill_serialnumber: yup.number().required().min(1),
	old_balance_amount: yup.number().required(),
	othercharges: yup
		.array()
		.transform((v, o) => {
			if (!o) return null;
			v = v.filter((chargeObj: SaOtherCharge) => Boolean(chargeObj.charge_type));
			return v.length === 0 ? null : v;
		})
		.optional()
		.nullable()
		.of(yup.object().shape(othercharge_schema).noUnknown()),
	bill_payment_id: yupIdRequired,
	total_drcr_amount: yupNumberOptional, // othercharges_amount - tds_amount
	total_gr_amount: yupNumberOptional,
	total_net_adjustment_amount: yup.number().required(), //cheque_amount + othercharges_amount
	total_othercharges_amount: yupNumberOptional,
	total_othertaxes_deducted: yupNumberOptionalMinMax(0),
	total_payment_amount: yupNumberOptionalMinMax(0), // cheque_amount + tds_amount + commission_amount
	total_tds_deducted: yupNumberOptionalMinMax(0),
	type: yupStringRequired.oneOf(["payment_against_commbill_jt"]).default("payment_against_commbill_jt"),
};

export const commbill_payment_chequedetail_jt_schema = {
	cheque_amount: yupNumberOptionalMinMax(0),
	cheque_bankname: yupStringOptional,
	cheque_date: yupDateOptional,
	cheque_mode: yupStringOptional,
	cheque_number: yupStringOptional,
	financial_year: yupFinancialYearBound(),
	// PK
	id: yupNumberOptionalMinMax(1), // autogenerated-serial
	payment_id: yupIdOptional,
	commbill_id: yupIdOptional,
	payment_of_type: yup.string().oneOf(["commbill"]).default("commbill"),
	type: yupStringRequired.oneOf(["payment_cheque_detail_jt"]).default("payment_cheque_detail_jt"),
};

export const commbill_payment_schema = {
	againstcommbills: yup.array().required().min(1).of(yup.object().shape(payment_againstCommBill_jt_schema).noUnknown()),
	// bill to
	bill_to_type: yup.string().oneOf(["clientcompany", "subbroker"]),
	bill_to_clientcompany_id: yup
		.string()
		.when("bill_to_subbroker_id", ([val]) =>
			!val ? yup.string().required("Either 'bill_to_clientcompany_id' or 'bill_to_subbroker_id' is required.") : yup.string().nullable(),
		),
	bill_to_clientcompany_name: yup.string().optional(),
	// tried defining when here also but it was giving error of Cyclic dependency
	bill_to_subbroker_id: yupStringOptional,
	bill_to_subbroker_name: yupStringOptional,
	// ownercompany
	ownercompany_id: yup.number().min(1),
	ownercompany_name: yupStringRequired,
	// cheque details
	chequedetails: yup
		.array()
		.optional()
		.of(yup.object().shape(commbill_payment_chequedetail_jt_schema).noUnknown())
		.test("totalChequeAmt", "Cheque Amount Totals Not Matching", function (value) {
			if (value && value.length > 0) {
				// console.log({value});
				if (value.reduce((acc, curr: any) => acc + Number(curr.cheque_amount || 0), 0) === this.parent.grandtotal_cheque_amount) {
					this.createError({ message: "error" });
					return true;
				}
				return false;
			}
			return true;
		}),
	id: yupIdRequired,
	// debit note details
	drcrnotes: yup.array().optional().nullable().of(yup.object().shape(payment_drcrnote).noUnknown()),
	creation_date: yupStringOptional,
	extra_image_urls: yup.array().optional().nullable(),
	financial_year: yupFinancialYearBound(),
	grandtotal_cheque_amount: yupNumberOptionalMinMax(0),
	grandtotal_drcr_amount: yupNumberOptional, // othercharges_amount - tds_amount - commission_amount
	grandtotal_commbill_amount_in_payment: yup.number().min(0.01),
	grandtotal_net_adjustment_amount: yup.number().required(), //cheque_amount + othercharges_amount
	grandtotal_othercharges_amount: yupNumberOptional,
	grandtotal_payment_amount: yupNumberOptionalMinMax(0), // cheque_amount + tds_amount + commission_amount
	grandtotal_tds_amount: yupNumberOptionalMinMax(0),
	notes: yupStringOptional,
	serial_number: yup.number().required().min(1),
	type: yupStringRequired.default("commbill_payment").oneOf(["commbill_payment"]),
	updated_date: yupStringOptional,
	voucher_date: yupDateRequired,
};

export const commbillPaymentValidator = yup.object().shape(commbill_payment_schema).noUnknown();

export type CommbillPayment = yup.InferType<typeof commbillPaymentValidator>